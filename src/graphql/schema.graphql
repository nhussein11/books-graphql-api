scalar Datetime

type Query {
    getBooks(pagination: PaginationInput): [Book]!
    getBook(id: ID!): Book
    getAuthors(pagination: PaginationInput): [Author]!
    getAuthor(id: ID!): Author
}
type Mutation {
    createBook(book: BookInput!): Book!
    updateBook(id: ID!, book: BookInput!): Book!
    deleteBook(id: ID!): Book!
    createAuthor(author: AuthorInput!): Author!
    updateAuthor(id: ID!, author: AuthorInput!): Author!
    deleteAuthor(id: ID!): Author!
}

interface BaseModel {
    id: ID!
    createdAt: Datetime!
    updatedAt: Datetime
    deletedAt: Datetime
}

type Book implements BaseModel {
    id: ID!
    createdAt: Datetime!
    updatedAt: Datetime
    deletedAt: Datetime

    title: String
    description: String
    year: Int
    category: Category
    author: Author
}

type Author implements BaseModel {
    id: ID!
    createdAt: Datetime!
    updatedAt: Datetime
    deletedAt: Datetime

    name: String
    surname: String
    birth: Datetime
    books: [Book]
}

enum Category {
    ADVENTURE
    HORROR
    SCIENCE_FICTION
    ROMANCE
}

input BookInput {
    title: String!
    description: String!
    year: Int!
    category: Category!
    authorId: String!
}

input AuthorInput {
    name: String!
    surname: String!
    birth: Datetime!
}
input PaginationInput {
    skip: Int
    take: Int
}
